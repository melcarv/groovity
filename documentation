## ‚úÖ Objetivo Geral
Desenvolver uma aplica√ß√£o Angular 16 que consome dados da API p√∫blica do Spotify, utilizando boas pr√°ticas modernas de frontend.

---

## üß± Etapas realizadas:

---

### 1. **Cria√ß√£o de um backend em Vercel**
#### üîê O que foi feito:
Foi criada uma API simples (`/api/token`) que gera um `access_token` do Spotify usando o fluxo **Client Credentials** com `client_id` e `client_secret`.

#### üß† Por que isso?
- **Seguran√ßa:** nunca expor o `client_secret` no frontend, o que seria uma falha grave.
- **Escalabilidade:** esse backend pode ser usado por outras aplica√ß√µes no futuro.
- **Praticidade:** o Vercel permite fazer isso gratuitamente e com deploy autom√°tico via GitHub. Bem como tornar autom√°tica a atualiza√ß√£o do token.

---

### 2. **Cria√ß√£o do `AuthService` no Angular**

Servi√ßo Angular respons√°vel por buscar, armazenar e fornecer o token de acesso do Spotify.

#### üîê O que foi feito:
Foi criado um servi√ßo que:
- Faz requisi√ß√£o ao backend `/api/token`
- Armazena o token em mem√≥ria
- Evita chamadas desnecess√°rias (s√≥ renova ap√≥s 1h)
- Exp√µe o token para o restante da aplica√ß√£o

#### üß† Por que isso?
- **Separa√ß√£o de responsabilidades:** componentes e servi√ßos n√£o precisam saber como o token √© obtido.
- **Performance:** evita v√°rias requisi√ß√µes desnecess√°rias ao backend.
- **Boas pr√°ticas Angular:** uso de `Observable`, `RxJS`, `tap`, `map` e `HttpClient` corretamente.
-

---

### 3. **Cria√ß√£o do `AuthInterceptor`**

Interceptor HTTP que escuta todas as requisi√ß√µes feitas com HttpClient e, se a URL for da API do Spotify, anexa automaticamente o token no cabe√ßalho (Authorization).

#### üîÑ O que foi feito:
Intercepta√ß√£o de todas as requisi√ß√µes que v√£o para `https://api.spotify.com/v1` e adicionando o token automaticamente no header `Authorization`.

#### üß† Por que isso?
- **Centraliza√ß√£o da l√≥gica de autentica√ß√£o:** nenhum servi√ßo precisa lembrar de adicionar o token.
- **Clean code:** reduz c√≥digo duplicado e melhora a legibilidade.
- **Recomendado em qualquer app real:** essa √© uma abordagem padr√£o em aplica√ß√µes Angular.

---

### üß† Resumo do fluxo at√© agora

```
Angular ‚Üí AuthService ‚Üí chama backend (/api/token) ‚Üí recebe token do Spotify
‚Üì
Interceptador ‚Üí anexa token automaticamente a cada requisi√ß√£o para a API do Spotify
‚Üì
Spotify API ‚Üí responde com dados de artistas, √°lbuns, faixas
```

---

### ‚úÖ Resultado at√© agora
- Fluxo seguro e limpo de autentica√ß√£o com a API do Spotify
- Segue exatamente as boas pr√°ticas que o desafio da NTT solicita:
  - **Consumo de API externa**
  - **Integra√ß√£o com autentica√ß√£o**
  - **Uso de `HttpClient`, `services`, `interceptors`, `environment.ts`**
  - **Separa√ß√£o clara de responsabilidades**

---

Continua...